version
library(readxl)
BostonHousing <- read_excel("Practice-datasets-R/Boston-Housing/BostonHousing.csv")
View(BostonHousing)
library(readxl)
BostonHousing <- read_excel("Practice-datasets-R/Boston-Housing/BostonHousing.csv")
View(BostonHousing)
library(readxl)
BostonHousing <- read_excel("Practice-datasets-R/Boston-Housing/BostonHousing.csv")
View(BostonHousing)
library(forecast)
install.packages("psych")
>library(psych)
library(forecast)
install.packages("scales")
library(forecast)
library(forecast)
datasets::ability.cov
train<- data("AirPassengers")
head(d)
head(train)
train.df<- data("AirPassengers")
head(train.df)
head(AirPassengers)
names(AirPassengers)
summary(AirPassengers)
is.na(AirPassengers)
names(AirPassengers)
head(AirPassengers)
tail(AirPassengers)
data("USArrests")
tail(USArrests)
names(USArrests)
dim(USArrests)
is.na(USArrests)
sum(is.na(USArrests))
names(USArrests)
names(USArrests)
summary(USArrests)
head(USArrests)
setwd("~/practice-datasets-R/BigMartSales")
train.df<-read_csv("train")
train.df<-read.csv("train")
train.df<-read.csv("train.csv")
test.df<-read.csv("test.df")
test.df<-read.csv("test.csv")
summary(train.df)
train.df<-read.csv("train.csv", na.string = c("","NaN", " "))
test.df<-read.csv("test.csv", na.string = c("","NaN", " "))
summary(train.df)
summary(test.df)
sum(is.na(predict))
summary(train.df)
setwd("~/practice-datasets-R/Loan Prediction")
features_train
train.df<-read.csv("train.csv", na.strings = c("","NaN"," "))
test.df<-read.csv("test.csv", na.strings = c("","NaN"," "))
test.df$Loan_Status <- as.factor("NA")
test.df<-read.csv("test.csv", na.strings = c("","NaN"," "))
summary(train.df)
summary(test.df)
features_train<-train.df[,]# copy of train set
features_test<-test.df[,]# copy of test set
features_train$Loan_ID=NULL
names(features_train)
countNATrain<-sapply(features_train, function(x) sum(is.na(x)))
countNATest<-sapply(features_test, function(x) sum(is.na(x)))
countNATrain
countNATest
features_test$Loan_Amount_Term[is.na(features_test$Loan_Amount_Term)]<-mean(features_test$Loan_Amount_Term)
features_train$Loan_Amount_Term[is.na(features_train$Loan_Amount_Term)]<-360
features_test$Loan_Amount_Term[is.na(features_test$Loan_Amount_Term)]<-mean(features_test$Loan_Amount_Term)
features_train$LoanAmount[is.na(features_train$LoanAmount)]<-180
features_test$LoanAmount[is.na(features_test$LoanAmount)]<-mean(features_test$LoanAmount)
features_train$Credit_History[is.na(features_train$Credit_History)]<-1
features_test$Credit_History[is.na(features_test$Credit_History)]<-mean(features_test$Credit_History)
features_train$Gender[is.na(features_train$Gender)]<-"Male"
features_test$Gender[is.na(features_test$Gender)]<-"Male"
features_train$Married[is.na(features_train$Married)]<-"Yes"
features_test$Married[is.na(features_test$Married)]<-"Yes"
features_train$Dependents[is.na(features_train$Dependents)]<-0
features_test$Dependents[is.na(features_test$Dependents)]<-0
features_train$Self_Employed[is.na(features_train$Self_Employed)]<-"Yes"
features_test$Self_Employed[is.na(features_test$Self_Employed)]<-"Yes"
sum(is.na(features_train))
sum(is.na(features_test))
summary(features_test)
summary(features_train)
summary(features_test)
summary(features_test)
features_test$Loan_Amount_Term[is.na(features_test$Loan_Amount_Term)]<-mean(features_test$Loan_Amount_Term)
summary(features_test)
features_test$Loan_Amount_Term[is.na(features_test$Loan_Amount_Term)]<-mean(features_test$Loan_Amount_Term)
summary(features_test)
countNATest<-sapply(features_test, function(x) sum(is.na(x)))
countNATest
features_test$Loan_Amount_Term[is.na(features_test$Loan_Amount_Term)]<-360
summary(features_test)
mean(features_test$Loan_Amount_Term)
m<-mean(features_test$Loan_Amount_Term)
features_test$Loan_Amount_Term[is.na(features_test$Loan_Amount_Term)]<-m
summary(features_test)
m2<-mean(features_test$LoanAmount)
features_test$LoanAmount[is.na(features_test$LoanAmount)]<-m2
summary(features_test)
m2<-mean(features_test$LoanAmount)
mean(features_test$LoanAmount)
mean(features_test$LoanAmount)
mean(features_test$Loan_Amount_Term)
mean(features_test$LoanAmount)
median(features_test$LoanAmount)
features_test$LoanAmount
LA<-features_test$LoanAmount
mean(LA)
is.na(LA)
for(i in LA){
print(i)
}
for(i in LA){
if(i!=""){
sum=sum+i
c++
}
}
c=0
for(i in LA){
if(i!=""){
sum=sum+i
c++
}
}
c<-0
for(i in LA){
if(i!="")
sum=sum+i
c++
}
c<-0
for(i in LA){
if(i!="")
sum=sum+i
c=c+1
}
c<-0
sum<-0
for(i in LA){
if(i!="")
sum=sum+i
c=c+1
}
c<-0
sum<-0
for(i in LA){
if(i)
sum=sum+i
c=c+1
}
c<-0
sum<-0
for(i in LA){
if(i){
sum=sum+i
c=c+1
}
}
LA
for(i in LA){
if(i!="NA"){
sum=sum+i
c=c+1
}
}
for(i in LA){
if(i!=NULL){
sum=sum+i
c=c+1
}
}
for(i in LA){
if(is.na(i)){
sum=sum+i
c=c+1
}
}
c
sum
for(i in LA){
if(!is.na(i)){
sum=sum+i
c=c+1
}
}
sum
for(i in LA){
if(is.na(i)==FALSE){
sum=sum+i
c=c+1
}
}
sum
for(i in LA){
if(is.na(i)==FALSE){
i
sum=sum+i
c=c+1
}
}
i
for(i in LA){
if(is.na(i)==FALSE){
i
sum=sum+i
c=c+1
}
}
c<-0
sum<-0
for(i in LA){
if(is.na(i)==FALSE){
i
sum<-sum+i
c<-c+1
}
}
sum
c
dim(LA)
mean_calculated<-sum/c
mean_calculated
features_test$LoanAmount[is.na(features_test$LoanAmount)]<-mean_calculated
summary(features_test)
features_test$Credit_History[is.na(features_test$Credit_History)]<-mean(features_test$Credit_History)
summary(features_test)
mean_calculated
CH<-features_test$Credit_History
c<-0
sum<-0
for(i in CH){
if(is.na(i)==FALSE){
i
sum<-sum+i
c<-c+1
}
}
mean_calculated<-sum/c
mean_calculated
features_test$Gender[is.na(features_test$Gender)]<-"Male"
summary(features_test)
countNATest
countNATest<-sapply(features_test, function(x) sum(is.na(x)))
countNATest
features_test$Credit_History[is.na(features_test$Credit_History)]<-mean_calculated
summary(features_test)
sum(is.na(features_test))
sum(is.na(features_train))
names(features)
names(features_train)
first_model <- glm(features_train$Loan_Status~.,family = binomial,data = features_train)
predict<- predict(first_model, newdata=features_test, type="response")
sum(is.na(predict))
predict <- ifelse(predict > 0.5,"Y","N")
submit <- data.frame(Loan_ID = features_test$Loan_ID, Loan_Status = predict)
write.csv(submit,"result.csv",row.names = FALSE)
